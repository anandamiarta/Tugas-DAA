import networkx as nx
import matplotlib.pyplot as plt

def checkifadjacent(nd,y):
    adjacencylist = list(G.neighbors(nd))
    for x in adjacencylist:
        if x == y:
            return True
        else:
            return False

def greedy(G):
    color_map = []
    iscolored = []
    colornode = []
    degrees = sorted(G.degree, key=lambda x: x[1], reverse=True) #sorted(list(val for (node,val) in G.degree()),reverse=True)
    sortednodes = list(node for (node, val) in degrees)
    print("sn:",sortednodes.__len__())
    print("ic:",iscolored.__len__())
    print(degrees)
    print(sortednodes)
    i = 1
    y=0
    j = 0
    #for nd in sortednodes:
    while y<sortednodes.__len__():
        if iscolored.__len__()==0:
            iscolored.append(sortednodes[y])
            color_map.append(colors[i])
            colornode.append((sortednodes[y],colors[i]))
        elif iscolored.__len__()==1:
            if not checkifadjacent(sortednodes[y],iscolored[j]): #and sortednodes[y] not in iscolored:
                iscolored.append(sortednodes[y])
                color_map.append(color_map[0])
            else:
                iscolored.append(sortednodes[y])
                color_map.append(colors[i+1])
            #i=i+1 
        elif iscolored.__len__()>1:
            adj=True
            k=0
            while k<iscolored.__len__() and adj==True:
                adj = checkifadjacent(sortednodes[y],iscolored[k])
                print("a true")
                k=k+1
            print("A",adj)
            #if adj!=True:
            #    iscolored.append(sortednodes[y])
            #    color_map.append(color_map[i])
                #colornode.append((sortednodes[y],color_map[i]))
            #    print("adj false")
            #else:
            #    iscolored.append(sortednodes[y])
            #    color_map.append(color_map[k])
            #    colornode.append((sortednodes[y],colors[i]))
            #    print(color_map[k])
        if j>0:
            j=j+1
            print("j",j)
        y=y+1  
    print(iscolored)
    print(color_map)
    nx.draw_shell(G, with_labels=True, font_weight='bold',node_color=color_map)    

if __name__ == '__main__':
    colors=['lightgray','red','orange','yellow','green','blue','purple','pink']
    #create empty graph
    G=nx.Graph()
    G.add_nodes_from([1,2,3,4,5,6])
    G.add_edges_from([(1,2),(2,3),(2,4),(3,5),(4,5),(5,6),(5,7)])
    #plt.subplot(111)
    #nx.draw(G, with_labels=True, font_weight='bold')
    #plt.subplot(222)
    #nx.draw_shell(G, with_labels=True, font_weight='bold', node_color=color[0])
    greedy(G)
    plt.show()





